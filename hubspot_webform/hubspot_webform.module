<?php
/**
 * @file
 * Sends Webform results to HubSpot's Forms API.
 */

/**
 * Implements hook_menu().
 */
function hubspot_webform_menu() {
  // Node HubSpot forms.
  $items['node/%webform_menu/webform/hubspot'] = array(
    'title' => 'HubSpot',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hubspot_webform_form_settings', 1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
    'file' => 'hubspot_webform.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_mail().
 */
function hubspot_webform_mail($key, &$message, $params) {
  $message['subject'] = t('HubSpot leads insertion error');

  switch ($key) {
    case 'http_error':
      $message['body'][] = t('When attempting to submit the form "@form" to HubSpot, a HTTP error occurred.', array(
        '@form' => $params['node_title'],
      ));
      break;

    case 'hub_error':
      $message['body'][] = t('Upon submitting the Webform "@form" to HubSpot, an error was returned.', array(
        '@form' => $params['node_title'],
      ));
      break;
  }

  $message['body'][] = t('Error message: @message', array('@message' => $params['errormsg']));
  $message['body'][] = t('HubSpot POST URL: @url', array('@url' => $params['hubspot_url']));
  $message['body'][] = t('To adjust the debugging settings, visit @url', array(
    '@url' => url('admin/config/content/hubspot', array('absolute' => TRUE))
  ));
}

/**
 * Implements hook_webform_submission_insert().
 *
 * Intercepts the WebForm submission and send it off to HubSpot.
 */
function hubspot_webform_webform_submission_insert($node, $submission) {
  // Get the Webform version
  $webform_path = drupal_get_path('module', 'webform') . '/webform.info';
  $webform_info = drupal_parse_info_file($webform_path);

  $matches = array();

  if (preg_match('/^(\d+\.x-)?(\d+)\..*$/', $webform_info['version'], $matches)) {
    $webform_major_version = $matches[2];
  }

  if ($submission->is_draft == 1) {
    return;
  }

  $hubspot_portalid = variable_get('hubspot_portalid', '');
  $hubspot_form_guid = db_query_range("SELECT hubspot_guid FROM {hubspot} h WHERE h.nid = :nid", 0, 1, array(
    ':nid' => $node->nid,
  ))->fetchField();

  if (empty($hubspot_portalid) || empty($hubspot_form_guid)) {
    return;
  }

  $fields = array();

  // These fields must be submitted with each request.
  $hs_context = array(
    'hutk' => isset($_COOKIE['hubspotutk']) ? $_COOKIE['hubspotutk'] : '',
    'ipAddress' => ip_address(),
    'pageName' => $node->title,
    'pageUrl' => url('node/' . $node->nid, array('absolute' => TRUE)),
  );

  $fields['hs_context'] = drupal_json_encode($hs_context);

  foreach ($node->webform['components'] as $data_id => $data) {
    // Skip if there is no data
    if (!isset($submission->data[$data_id])) {
      continue;
    }
    else {
      // Get the component value (submission structure differs from Webform 3 and 4).
      // https://drupal.org/node/1609324#submission-structure
      $component_data = $webform_major_version <= 3 ? $submission->data[$data_id]['value'] : $submission->data[$data_id];
    }

    $sql = "SELECT hubspot_field FROM {hubspot} h WHERE h.nid = :nid AND h.hubspot_guid = :guid AND h.webform_field = :webform_field";

    if ($data['type'] == 'addressfield' && module_exists('addressfield_tokens')) {
      $addressfield_fields = addressfield_tokens_components();
      $addressfield_data = unserialize($component_data[0]);

      foreach ($addressfield_fields as $addressfield_key => $addressfield_values) {
        $result = db_query($sql, array(':nid' => $node->nid, ':guid' => $hubspot_form_guid, ':webform_field' => $data['form_key'] . '_' . $addressfield_key))->fetchField();

        $result = db_query_range($sql, 0, 1, array(
          ':nid' => $node->nid,
          ':guid' => $hubspot_form_guid,
          ':webform_field' => $data['form_key'] . '_' . $addressfield_key,
        ))->fetchField();

        if ($result && $result != '--donotmap--') {
          $fields[$result] = $addressfield_data[$addressfield_key];
        }
      }
    }
    else {
      $result = db_query_range($sql, 0, 1, array(
        ':nid' => $node->nid,
        ':guid' => $hubspot_form_guid,
        ':webform_field' => $data['form_key'],
      ))->fetchField();

      if ($result && $result != '--donotmap--') {
        if (count($component_data) > 1) {
          $fields[$result] = '';
          foreach ($component_data as $value) {
            if (!empty($fields[$result])) {
              $fields[$result] .= ';' . $value;
            }
            else {
              $fields[$result] .= $value;
            }
          }
        }
        elseif (isset($component_data[0])) {
          $fields[$result] = $component_data[0];
        }
      }
    }
  }

  $result = hubspot_webform_insert_lead($hubspot_portalid, $hubspot_form_guid, $fields);

  if ($result['HTTPCode'] == '204') {
    watchdog('hubspot', 'Webform "%form" results succesfully submitted to HubSpot. Post: @post - Response: @msg', array(
      '@post' => strip_tags($result['POST']),
      '@msg' => strip_tags($result['Data']),
      '%form' => $node->title,
    ), WATCHDOG_INFO);
  }
  elseif (!empty($result['Error'])) {
    watchdog('hubspot', 'HTTP error when submitting HubSpot data from Webform "%form": @error', array(
      '@error' => $result['Error'],
      '%form' => $node->title,
    ), WATCHDOG_ERROR);

    if (variable_get('hubspot_debug_on', 0)) {
      drupal_mail('hubspot', 'http_error', variable_get('hubspot_debug_email', variable_get('site_mail', '')), language_default(), array(
        'errormsg' => $result['Error'],
        'hubspot_url' => $hubspot_url,
        'node_title' => $node->title,
      ), variable_get('site_mail', ''));
    }
  }
  else {
    watchdog('hubspot', 'HubSpot error when submitting Webform "%form": @error', array(
      '@error' => $result['Data'],
      '%form' => $node->title,
    ), WATCHDOG_ERROR);

    if (variable_get('hubspot_debug_on', 0)) {
      drupal_mail('hubspot', 'hub_error', variable_get('hubspot_debug_email', variable_get('site_mail', '')), language_default(), array(
        'errormsg' => $result['Data'],
        'hubspot_url' => $hubspot_url,
        'node_title' => $node->title,
      ), variable_get('site_mail', ''));
    }
  }
}

/**
 * Executes the HubSpot API POST to insert a lead.
 *
 * @param string $portal_id
 *   HubSpot Portal ID to submit to.
 * @param string $form_guid
 *   HubSpot-provided Form API GUID to submit to.
 * @param array $fields
 *   Form fields, such as name and contact info.
 *
 * @return array
 *   An associative array containing:
 *   - Data: The response returned from drupal_http_request().
 *   - Error: The HTTP error message from drupal_http_request().
 *   - HTTPCode: The HTTP response code of the request.
 */
function hubspot_webform_insert_lead($portal_id, $form_guid, $fields) {
  $str_post = drupal_http_build_query($fields);

  // Send POST data.
  $result = drupal_http_request('https://forms.hubspot.com/uploads/form/v2/' . $portal_id . '/' . $form_guid, array(
    'headers' => array(
      'Content-Type' => 'application/x-www-form-urlencoded',
    ),
    'method' => 'POST',
    'data' => $str_post,
  ));

  return array(
    'Data' => isset($result->data) ? $result->data : '',
    'Error' => isset($result->error) ? $result->error : '',
    'HTTPCode' => $result->code,
    'POST' => $str_post,
  );
}

/**
 * Implements hook_help().
 */
function hubspot_webform_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'node/%/webform/hubspot':
      $output .= '<p>' . t("To post this form's results to HubSpot you will need to select the HubSpot form and map the
        webform fields to the available HubSpot fields.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Returns the default value for the given arguments.
 */
function _hubspot_webform_default_value($nid, $hubspot_guid = NULL, $webform_field = NULL) {
  if (empty($hubspot_guid)) {
    return db_query_range("SELECT hubspot_guid FROM {hubspot} h WHERE h.nid = :nid", 0, 1, array(':nid' => $nid))->fetchField();
  }
  else {
    return db_query_range("SELECT hubspot_field FROM {hubspot} h WHERE h.nid = :nid AND h.hubspot_guid = :guid AND h.webform_field = :webform_field", 0, 1, array(
      ':nid' => $nid,
      ':guid' => $hubspot_guid,
      ':webform_field' => $webform_field,
    ))->fetchField();
  }
}

/**
 * Implements hook_form_alter().
 */
function hubspot_webform_form_alter(&$form, $form_state, $form_id) {
  if (strstr($form_id, 'hubspot_admin_settings')) {
    $form['webforms'] = array(
      '#title' => t('Webforms'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#group' => 'additional_settings',
      '#description' => 'The following webforms have been detected and can be configured to submit to the HubSpot API.',
      '#tree' => TRUE,
    );

    $webform_nodes = variable_get('webform_node_types', array('webform'));
    $nodes = array();

    $hubspot_forms = _hubspot_webform_get_forms();

    if (isset($hubspot_forms['error'])) {
      $form['webforms']['#description'] = $hubspot_forms['error'];
    }
    else {
      if (empty($hubspot_forms['value'])) {
        $form['webforms']['#description'] = t('No HubSpot forms found. You will need to create a form on HubSpot before you can configure it here.');
      }
      else {
        $hubspot_form_options = array("--donotmap--" => "Do Not Map");
        $hubspot_field_options = array();
        foreach ($hubspot_forms['value'] as $hubspot_form) {
          $hubspot_form_options[$hubspot_form['guid']] = $hubspot_form['name'];
          $hubspot_field_options[$hubspot_form['guid']]['fields']['--donotmap--'] = "Do Not Map";
          foreach ($hubspot_form['fields'] as $hubspot_field) {
            $hubspot_field_options[$hubspot_form['guid']]['fields'][$hubspot_field['name']] = $hubspot_field['label'] . ' (' . $hubspot_field['fieldType'] . ')';
          }
        }

        foreach ($webform_nodes as $node_type) {
          $query = new EntityFieldQuery();

          $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', $node_type)
            ->propertyCondition('status', 1);

          $result = $query->execute();

          if (isset($result['node'])) {
            $node_ids = array_keys($result['node']);
            $nodes = array_merge($nodes, entity_load('node', $node_ids));
          }
        }

        foreach ($nodes as $node) {
          $nid = $node->nid;
          $form['webforms']['nid-' . $nid] = array(
            '#title' => $node->title,
            '#type' => 'fieldset',
          );

          $form['webforms']['nid-' . $nid]['hubspot_form'] = array(
            '#title' => t('HubSpot form'),
            '#type' => 'select',
            '#options' => $hubspot_form_options,
            '#default_value' => _hubspot_webform_default_value($nid),
          );

          foreach ($hubspot_form_options as $key => $value) {
            if ($key != '--donotmap--') {
              $form['webforms']['nid-' . $nid][$key] = array(
                '#title' => t('Field mappings for @field', array('@field' => $value)),
                '#type' => 'fieldset',
                '#states' => array(
                  'visible' => array(
                    ':input[name="webforms[nid-' . $nid . '][hubspot_form]"]' => array('value' => $key),
                  ),
                ),
              );

              foreach ($node->webform['components'] as $component) {
                if ($component['type'] !== 'markup') {
                  $form['webforms']['nid-' . $nid][$key][$component['form_key']] = array(
                    '#title' => $component['name'] . ' (' . $component['type'] . ')',
                    '#type' => 'select',
                    '#options' => $hubspot_field_options[$key]['fields'],
                    '#default_value' => _hubspot_webform_default_value($nid, $key, $component['form_key']),
                  );
                }
              }
            }
          }
        }
      }
    }

    $form['#submit'][] = 'hubspot_webform_settings_submit';
  }
}

/**
 * Submit handler for hubspot_webform_settings().
 */
function hubspot_webform_settings_submit($form, &$form_state) {
  $txn = db_transaction();

  // Check if webform values even exist before continuing.
  if (isset($form_state['values']['webforms'])) {
    foreach ($form_state['values']['webforms'] as $key => $settings) {
      db_delete('hubspot')->condition('nid', str_replace('nid-', '', $key))->execute();

      if ($settings['hubspot_form'] != '--donotmap--') {
        foreach ($settings[$settings['hubspot_form']] as $webform_field => $hubspot_field) {
          $fields = array(
            'nid' => str_replace('nid-', '', $key),
            'hubspot_guid' => $settings['hubspot_form'],
            'webform_field' => $webform_field,
            'hubspot_field' => $hubspot_field,
          );
          db_insert('hubspot')->fields($fields)->execute();
        }
      }
    }
  }
}

/**
 * Gets the list of forms from HubSpot via the API.
 */
function _hubspot_webform_get_forms() {
  $access_token = variable_get('hubspot_access_token', '');

  if (empty($access_token)) {
    return array('error' => t('This site is not connected to a HubSpot Account.'));
  }

  $request = drupal_http_request("https://api.hubapi.com/contacts/v1/forms?access_token={$access_token}");

  if ($request->code == 401) {
    $refresh = hubspot_oauth_refresh();
    if ($refresh) {
      $access_token = variable_get('hubspot_access_token', '');
      $request = drupal_http_request("https://api.hubapi.com/contacts/v1/forms?access_token={$access_token}");
    }
  }

  return array('value' => drupal_json_decode($request->data));
}
